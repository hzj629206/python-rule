Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression_list
Rule 2     statement -> empty
Rule 3     expression_list -> logical_expression
Rule 4     expression_list -> expression_decl_list
Rule 5     expression_list -> expression_decl_list COMMA logical_expression
Rule 6     expression_decl_list -> expression_decl
Rule 7     expression_decl_list -> expression_decl_list COMMA expression_decl
Rule 8     expression_decl -> assign_expression
Rule 9     expression_decl -> bind_expression
Rule 10    assign_expression -> VARIABLE EQUALS conditional_expression
Rule 11    bind_expression -> VARIABLE COLON VARIABLE
Rule 12    conditional_expression -> logical_expression
Rule 13    conditional_expression -> logical_expression CONDITION logical_expression COLON conditional_expression
Rule 14    logical_expression -> logical_expression OR logical_expression
Rule 15    logical_expression -> logical_expression AND logical_expression
Rule 16    logical_expression -> logical_expression EQ logical_expression
Rule 17    logical_expression -> logical_expression NE logical_expression
Rule 18    logical_expression -> logical_expression LE logical_expression
Rule 19    logical_expression -> logical_expression LT logical_expression
Rule 20    logical_expression -> logical_expression GE logical_expression
Rule 21    logical_expression -> logical_expression GT logical_expression
Rule 22    logical_expression -> logical_expression IN logical_expression
Rule 23    logical_expression -> logical_expression NI logical_expression
Rule 24    logical_expression -> logical_expression ADD logical_expression
Rule 25    logical_expression -> logical_expression SUB logical_expression
Rule 26    logical_expression -> logical_expression MUL logical_expression
Rule 27    logical_expression -> logical_expression FLOORDIV logical_expression
Rule 28    logical_expression -> logical_expression DIV logical_expression
Rule 29    logical_expression -> logical_expression MOD logical_expression
Rule 30    logical_expression -> logical_expression PERIOD SYMBOL
Rule 31    logical_expression -> NOT logical_expression
Rule 32    logical_expression -> SUB logical_expression
Rule 33    logical_expression -> ADD logical_expression
Rule 34    logical_expression -> LPAREN logical_expression RPAREN
Rule 35    logical_expression -> LBRACKET logical_comma_expression RBRACKET
Rule 36    logical_expression -> LBRACKET empty RBRACKET
Rule 37    logical_comma_expression -> logical_expression
Rule 38    logical_comma_expression -> logical_comma_expression COMMA logical_expression
Rule 39    logical_expression -> FLOAT
Rule 40    logical_expression -> INT
Rule 41    logical_expression -> STRING
Rule 42    logical_expression -> VARIABLE
Rule 43    logical_expression -> FILTER
Rule 44    logical_expression -> SYMBOL
Rule 45    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 24 33
AND                  : 15
COLON                : 11 13
COMMA                : 5 7 38
CONDITION            : 13
DIV                  : 28
EQ                   : 16
EQUALS               : 10
FILTER               : 43
FLOAT                : 39
FLOORDIV             : 27
GE                   : 20
GT                   : 21
IN                   : 22
INT                  : 40
LBRACKET             : 35 36
LE                   : 18
LPAREN               : 34
LT                   : 19
MOD                  : 29
MUL                  : 26
NE                   : 17
NI                   : 23
NOT                  : 31
OR                   : 14
PERIOD               : 30
RBRACKET             : 35 36
RPAREN               : 34
STRING               : 41
SUB                  : 25 32
SYMBOL               : 30 44
VARIABLE             : 10 11 11 42
error                : 

Nonterminals, with rules where they appear

assign_expression    : 8
bind_expression      : 9
conditional_expression : 10 13
empty                : 2 36
expression_decl      : 6 7
expression_decl_list : 4 5 7
expression_list      : 1
logical_comma_expression : 35 38
logical_expression   : 3 5 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 31 32 33 34 37 38
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression_list
    (2) statement -> . empty
    (3) expression_list -> . logical_expression
    (4) expression_list -> . expression_decl_list
    (5) expression_list -> . expression_decl_list COMMA logical_expression
    (45) empty -> .
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL
    (6) expression_decl_list -> . expression_decl
    (7) expression_decl_list -> . expression_decl_list COMMA expression_decl
    (8) expression_decl -> . assign_expression
    (9) expression_decl -> . bind_expression
    (10) assign_expression -> . VARIABLE EQUALS conditional_expression
    (11) bind_expression -> . VARIABLE COLON VARIABLE

    $end            reduce using rule 45 (empty -> .)
    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 5
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    bind_expression                shift and go to state 10
    expression_decl                shift and go to state 2
    expression_list                shift and go to state 15
    expression_decl_list           shift and go to state 12
    empty                          shift and go to state 8
    statement                      shift and go to state 7
    logical_expression             shift and go to state 6
    assign_expression              shift and go to state 13

state 1

    (32) logical_expression -> SUB . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 20

state 2

    (6) expression_decl_list -> expression_decl .

    COMMA           reduce using rule 6 (expression_decl_list -> expression_decl .)
    $end            reduce using rule 6 (expression_decl_list -> expression_decl .)


state 3

    (44) logical_expression -> SYMBOL .

    CONDITION       reduce using rule 44 (logical_expression -> SYMBOL .)
    OR              reduce using rule 44 (logical_expression -> SYMBOL .)
    AND             reduce using rule 44 (logical_expression -> SYMBOL .)
    EQ              reduce using rule 44 (logical_expression -> SYMBOL .)
    NE              reduce using rule 44 (logical_expression -> SYMBOL .)
    LE              reduce using rule 44 (logical_expression -> SYMBOL .)
    LT              reduce using rule 44 (logical_expression -> SYMBOL .)
    GE              reduce using rule 44 (logical_expression -> SYMBOL .)
    GT              reduce using rule 44 (logical_expression -> SYMBOL .)
    IN              reduce using rule 44 (logical_expression -> SYMBOL .)
    NI              reduce using rule 44 (logical_expression -> SYMBOL .)
    ADD             reduce using rule 44 (logical_expression -> SYMBOL .)
    SUB             reduce using rule 44 (logical_expression -> SYMBOL .)
    MUL             reduce using rule 44 (logical_expression -> SYMBOL .)
    FLOORDIV        reduce using rule 44 (logical_expression -> SYMBOL .)
    DIV             reduce using rule 44 (logical_expression -> SYMBOL .)
    MOD             reduce using rule 44 (logical_expression -> SYMBOL .)
    PERIOD          reduce using rule 44 (logical_expression -> SYMBOL .)
    COMMA           reduce using rule 44 (logical_expression -> SYMBOL .)
    $end            reduce using rule 44 (logical_expression -> SYMBOL .)
    RPAREN          reduce using rule 44 (logical_expression -> SYMBOL .)
    RBRACKET        reduce using rule 44 (logical_expression -> SYMBOL .)
    COLON           reduce using rule 44 (logical_expression -> SYMBOL .)


state 4

    (35) logical_expression -> LBRACKET . logical_comma_expression RBRACKET
    (36) logical_expression -> LBRACKET . empty RBRACKET
    (37) logical_comma_expression -> . logical_expression
    (38) logical_comma_expression -> . logical_comma_expression COMMA logical_expression
    (45) empty -> .
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    RBRACKET        reduce using rule 45 (empty -> .)
    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 22
    empty                          shift and go to state 23
    logical_comma_expression       shift and go to state 24

state 5

    (42) logical_expression -> VARIABLE .
    (10) assign_expression -> VARIABLE . EQUALS conditional_expression
    (11) bind_expression -> VARIABLE . COLON VARIABLE

    OR              reduce using rule 42 (logical_expression -> VARIABLE .)
    AND             reduce using rule 42 (logical_expression -> VARIABLE .)
    EQ              reduce using rule 42 (logical_expression -> VARIABLE .)
    NE              reduce using rule 42 (logical_expression -> VARIABLE .)
    LE              reduce using rule 42 (logical_expression -> VARIABLE .)
    LT              reduce using rule 42 (logical_expression -> VARIABLE .)
    GE              reduce using rule 42 (logical_expression -> VARIABLE .)
    GT              reduce using rule 42 (logical_expression -> VARIABLE .)
    IN              reduce using rule 42 (logical_expression -> VARIABLE .)
    NI              reduce using rule 42 (logical_expression -> VARIABLE .)
    ADD             reduce using rule 42 (logical_expression -> VARIABLE .)
    SUB             reduce using rule 42 (logical_expression -> VARIABLE .)
    MUL             reduce using rule 42 (logical_expression -> VARIABLE .)
    FLOORDIV        reduce using rule 42 (logical_expression -> VARIABLE .)
    DIV             reduce using rule 42 (logical_expression -> VARIABLE .)
    MOD             reduce using rule 42 (logical_expression -> VARIABLE .)
    PERIOD          reduce using rule 42 (logical_expression -> VARIABLE .)
    $end            reduce using rule 42 (logical_expression -> VARIABLE .)
    EQUALS          shift and go to state 26
    COLON           shift and go to state 25


state 6

    (3) expression_list -> logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    $end            reduce using rule 3 (expression_list -> logical_expression .)
    OR              shift and go to state 42
    AND             shift and go to state 27
    EQ              shift and go to state 41
    NE              shift and go to state 34
    LE              shift and go to state 29
    LT              shift and go to state 36
    GE              shift and go to state 30
    GT              shift and go to state 37
    IN              shift and go to state 38
    NI              shift and go to state 28
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35


state 7

    (0) S' -> statement .



state 8

    (2) statement -> empty .

    $end            reduce using rule 2 (statement -> empty .)


state 9

    (41) logical_expression -> STRING .

    CONDITION       reduce using rule 41 (logical_expression -> STRING .)
    OR              reduce using rule 41 (logical_expression -> STRING .)
    AND             reduce using rule 41 (logical_expression -> STRING .)
    EQ              reduce using rule 41 (logical_expression -> STRING .)
    NE              reduce using rule 41 (logical_expression -> STRING .)
    LE              reduce using rule 41 (logical_expression -> STRING .)
    LT              reduce using rule 41 (logical_expression -> STRING .)
    GE              reduce using rule 41 (logical_expression -> STRING .)
    GT              reduce using rule 41 (logical_expression -> STRING .)
    IN              reduce using rule 41 (logical_expression -> STRING .)
    NI              reduce using rule 41 (logical_expression -> STRING .)
    ADD             reduce using rule 41 (logical_expression -> STRING .)
    SUB             reduce using rule 41 (logical_expression -> STRING .)
    MUL             reduce using rule 41 (logical_expression -> STRING .)
    FLOORDIV        reduce using rule 41 (logical_expression -> STRING .)
    DIV             reduce using rule 41 (logical_expression -> STRING .)
    MOD             reduce using rule 41 (logical_expression -> STRING .)
    PERIOD          reduce using rule 41 (logical_expression -> STRING .)
    COMMA           reduce using rule 41 (logical_expression -> STRING .)
    $end            reduce using rule 41 (logical_expression -> STRING .)
    RPAREN          reduce using rule 41 (logical_expression -> STRING .)
    RBRACKET        reduce using rule 41 (logical_expression -> STRING .)
    COLON           reduce using rule 41 (logical_expression -> STRING .)


state 10

    (9) expression_decl -> bind_expression .

    COMMA           reduce using rule 9 (expression_decl -> bind_expression .)
    $end            reduce using rule 9 (expression_decl -> bind_expression .)


state 11

    (34) logical_expression -> LPAREN . logical_expression RPAREN
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 44

state 12

    (4) expression_list -> expression_decl_list .
    (5) expression_list -> expression_decl_list . COMMA logical_expression
    (7) expression_decl_list -> expression_decl_list . COMMA expression_decl

    $end            reduce using rule 4 (expression_list -> expression_decl_list .)
    COMMA           shift and go to state 45


state 13

    (8) expression_decl -> assign_expression .

    COMMA           reduce using rule 8 (expression_decl -> assign_expression .)
    $end            reduce using rule 8 (expression_decl -> assign_expression .)


state 14

    (40) logical_expression -> INT .

    CONDITION       reduce using rule 40 (logical_expression -> INT .)
    OR              reduce using rule 40 (logical_expression -> INT .)
    AND             reduce using rule 40 (logical_expression -> INT .)
    EQ              reduce using rule 40 (logical_expression -> INT .)
    NE              reduce using rule 40 (logical_expression -> INT .)
    LE              reduce using rule 40 (logical_expression -> INT .)
    LT              reduce using rule 40 (logical_expression -> INT .)
    GE              reduce using rule 40 (logical_expression -> INT .)
    GT              reduce using rule 40 (logical_expression -> INT .)
    IN              reduce using rule 40 (logical_expression -> INT .)
    NI              reduce using rule 40 (logical_expression -> INT .)
    ADD             reduce using rule 40 (logical_expression -> INT .)
    SUB             reduce using rule 40 (logical_expression -> INT .)
    MUL             reduce using rule 40 (logical_expression -> INT .)
    FLOORDIV        reduce using rule 40 (logical_expression -> INT .)
    DIV             reduce using rule 40 (logical_expression -> INT .)
    MOD             reduce using rule 40 (logical_expression -> INT .)
    PERIOD          reduce using rule 40 (logical_expression -> INT .)
    COMMA           reduce using rule 40 (logical_expression -> INT .)
    $end            reduce using rule 40 (logical_expression -> INT .)
    RPAREN          reduce using rule 40 (logical_expression -> INT .)
    RBRACKET        reduce using rule 40 (logical_expression -> INT .)
    COLON           reduce using rule 40 (logical_expression -> INT .)


state 15

    (1) statement -> expression_list .

    $end            reduce using rule 1 (statement -> expression_list .)


state 16

    (39) logical_expression -> FLOAT .

    CONDITION       reduce using rule 39 (logical_expression -> FLOAT .)
    OR              reduce using rule 39 (logical_expression -> FLOAT .)
    AND             reduce using rule 39 (logical_expression -> FLOAT .)
    EQ              reduce using rule 39 (logical_expression -> FLOAT .)
    NE              reduce using rule 39 (logical_expression -> FLOAT .)
    LE              reduce using rule 39 (logical_expression -> FLOAT .)
    LT              reduce using rule 39 (logical_expression -> FLOAT .)
    GE              reduce using rule 39 (logical_expression -> FLOAT .)
    GT              reduce using rule 39 (logical_expression -> FLOAT .)
    IN              reduce using rule 39 (logical_expression -> FLOAT .)
    NI              reduce using rule 39 (logical_expression -> FLOAT .)
    ADD             reduce using rule 39 (logical_expression -> FLOAT .)
    SUB             reduce using rule 39 (logical_expression -> FLOAT .)
    MUL             reduce using rule 39 (logical_expression -> FLOAT .)
    FLOORDIV        reduce using rule 39 (logical_expression -> FLOAT .)
    DIV             reduce using rule 39 (logical_expression -> FLOAT .)
    MOD             reduce using rule 39 (logical_expression -> FLOAT .)
    PERIOD          reduce using rule 39 (logical_expression -> FLOAT .)
    COMMA           reduce using rule 39 (logical_expression -> FLOAT .)
    $end            reduce using rule 39 (logical_expression -> FLOAT .)
    RPAREN          reduce using rule 39 (logical_expression -> FLOAT .)
    RBRACKET        reduce using rule 39 (logical_expression -> FLOAT .)
    COLON           reduce using rule 39 (logical_expression -> FLOAT .)


state 17

    (33) logical_expression -> ADD . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 46

state 18

    (43) logical_expression -> FILTER .

    CONDITION       reduce using rule 43 (logical_expression -> FILTER .)
    OR              reduce using rule 43 (logical_expression -> FILTER .)
    AND             reduce using rule 43 (logical_expression -> FILTER .)
    EQ              reduce using rule 43 (logical_expression -> FILTER .)
    NE              reduce using rule 43 (logical_expression -> FILTER .)
    LE              reduce using rule 43 (logical_expression -> FILTER .)
    LT              reduce using rule 43 (logical_expression -> FILTER .)
    GE              reduce using rule 43 (logical_expression -> FILTER .)
    GT              reduce using rule 43 (logical_expression -> FILTER .)
    IN              reduce using rule 43 (logical_expression -> FILTER .)
    NI              reduce using rule 43 (logical_expression -> FILTER .)
    ADD             reduce using rule 43 (logical_expression -> FILTER .)
    SUB             reduce using rule 43 (logical_expression -> FILTER .)
    MUL             reduce using rule 43 (logical_expression -> FILTER .)
    FLOORDIV        reduce using rule 43 (logical_expression -> FILTER .)
    DIV             reduce using rule 43 (logical_expression -> FILTER .)
    MOD             reduce using rule 43 (logical_expression -> FILTER .)
    PERIOD          reduce using rule 43 (logical_expression -> FILTER .)
    COMMA           reduce using rule 43 (logical_expression -> FILTER .)
    $end            reduce using rule 43 (logical_expression -> FILTER .)
    RPAREN          reduce using rule 43 (logical_expression -> FILTER .)
    RBRACKET        reduce using rule 43 (logical_expression -> FILTER .)
    COLON           reduce using rule 43 (logical_expression -> FILTER .)


state 19

    (31) logical_expression -> NOT . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 47

state 20

    (32) logical_expression -> SUB logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 32 (logical_expression -> SUB logical_expression .)
    OR              reduce using rule 32 (logical_expression -> SUB logical_expression .)
    AND             reduce using rule 32 (logical_expression -> SUB logical_expression .)
    EQ              reduce using rule 32 (logical_expression -> SUB logical_expression .)
    NE              reduce using rule 32 (logical_expression -> SUB logical_expression .)
    LE              reduce using rule 32 (logical_expression -> SUB logical_expression .)
    LT              reduce using rule 32 (logical_expression -> SUB logical_expression .)
    GE              reduce using rule 32 (logical_expression -> SUB logical_expression .)
    GT              reduce using rule 32 (logical_expression -> SUB logical_expression .)
    IN              reduce using rule 32 (logical_expression -> SUB logical_expression .)
    NI              reduce using rule 32 (logical_expression -> SUB logical_expression .)
    ADD             reduce using rule 32 (logical_expression -> SUB logical_expression .)
    SUB             reduce using rule 32 (logical_expression -> SUB logical_expression .)
    MUL             reduce using rule 32 (logical_expression -> SUB logical_expression .)
    FLOORDIV        reduce using rule 32 (logical_expression -> SUB logical_expression .)
    DIV             reduce using rule 32 (logical_expression -> SUB logical_expression .)
    MOD             reduce using rule 32 (logical_expression -> SUB logical_expression .)
    COMMA           reduce using rule 32 (logical_expression -> SUB logical_expression .)
    $end            reduce using rule 32 (logical_expression -> SUB logical_expression .)
    RPAREN          reduce using rule 32 (logical_expression -> SUB logical_expression .)
    RBRACKET        reduce using rule 32 (logical_expression -> SUB logical_expression .)
    COLON           reduce using rule 32 (logical_expression -> SUB logical_expression .)
    PERIOD          shift and go to state 35

  ! PERIOD          [ reduce using rule 32 (logical_expression -> SUB logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]
  ! ADD             [ shift and go to state 32 ]
  ! SUB             [ shift and go to state 31 ]
  ! MUL             [ shift and go to state 39 ]
  ! FLOORDIV        [ shift and go to state 33 ]
  ! DIV             [ shift and go to state 40 ]
  ! MOD             [ shift and go to state 43 ]


state 21

    (42) logical_expression -> VARIABLE .

    CONDITION       reduce using rule 42 (logical_expression -> VARIABLE .)
    OR              reduce using rule 42 (logical_expression -> VARIABLE .)
    AND             reduce using rule 42 (logical_expression -> VARIABLE .)
    EQ              reduce using rule 42 (logical_expression -> VARIABLE .)
    NE              reduce using rule 42 (logical_expression -> VARIABLE .)
    LE              reduce using rule 42 (logical_expression -> VARIABLE .)
    LT              reduce using rule 42 (logical_expression -> VARIABLE .)
    GE              reduce using rule 42 (logical_expression -> VARIABLE .)
    GT              reduce using rule 42 (logical_expression -> VARIABLE .)
    IN              reduce using rule 42 (logical_expression -> VARIABLE .)
    NI              reduce using rule 42 (logical_expression -> VARIABLE .)
    ADD             reduce using rule 42 (logical_expression -> VARIABLE .)
    SUB             reduce using rule 42 (logical_expression -> VARIABLE .)
    MUL             reduce using rule 42 (logical_expression -> VARIABLE .)
    FLOORDIV        reduce using rule 42 (logical_expression -> VARIABLE .)
    DIV             reduce using rule 42 (logical_expression -> VARIABLE .)
    MOD             reduce using rule 42 (logical_expression -> VARIABLE .)
    PERIOD          reduce using rule 42 (logical_expression -> VARIABLE .)
    COMMA           reduce using rule 42 (logical_expression -> VARIABLE .)
    $end            reduce using rule 42 (logical_expression -> VARIABLE .)
    RPAREN          reduce using rule 42 (logical_expression -> VARIABLE .)
    RBRACKET        reduce using rule 42 (logical_expression -> VARIABLE .)
    COLON           reduce using rule 42 (logical_expression -> VARIABLE .)


state 22

    (37) logical_comma_expression -> logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    RBRACKET        reduce using rule 37 (logical_comma_expression -> logical_expression .)
    COMMA           reduce using rule 37 (logical_comma_expression -> logical_expression .)
    OR              shift and go to state 42
    AND             shift and go to state 27
    EQ              shift and go to state 41
    NE              shift and go to state 34
    LE              shift and go to state 29
    LT              shift and go to state 36
    GE              shift and go to state 30
    GT              shift and go to state 37
    IN              shift and go to state 38
    NI              shift and go to state 28
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35


state 23

    (36) logical_expression -> LBRACKET empty . RBRACKET

    RBRACKET        shift and go to state 48


state 24

    (35) logical_expression -> LBRACKET logical_comma_expression . RBRACKET
    (38) logical_comma_expression -> logical_comma_expression . COMMA logical_expression

    RBRACKET        shift and go to state 49
    COMMA           shift and go to state 50


state 25

    (11) bind_expression -> VARIABLE COLON . VARIABLE

    VARIABLE        shift and go to state 51


state 26

    (10) assign_expression -> VARIABLE EQUALS . conditional_expression
    (12) conditional_expression -> . logical_expression
    (13) conditional_expression -> . logical_expression CONDITION logical_expression COLON conditional_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 52
    conditional_expression         shift and go to state 53

state 27

    (15) logical_expression -> logical_expression AND . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 54

state 28

    (23) logical_expression -> logical_expression NI . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 55

state 29

    (18) logical_expression -> logical_expression LE . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 56

state 30

    (20) logical_expression -> logical_expression GE . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 57

state 31

    (25) logical_expression -> logical_expression SUB . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 58

state 32

    (24) logical_expression -> logical_expression ADD . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 59

state 33

    (27) logical_expression -> logical_expression FLOORDIV . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 60

state 34

    (17) logical_expression -> logical_expression NE . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 61

state 35

    (30) logical_expression -> logical_expression PERIOD . SYMBOL

    SYMBOL          shift and go to state 62


state 36

    (19) logical_expression -> logical_expression LT . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 63

state 37

    (21) logical_expression -> logical_expression GT . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 64

state 38

    (22) logical_expression -> logical_expression IN . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 65

state 39

    (26) logical_expression -> logical_expression MUL . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 66

state 40

    (28) logical_expression -> logical_expression DIV . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 67

state 41

    (16) logical_expression -> logical_expression EQ . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 68

state 42

    (14) logical_expression -> logical_expression OR . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 69

state 43

    (29) logical_expression -> logical_expression MOD . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 70

state 44

    (34) logical_expression -> LPAREN logical_expression . RPAREN
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    RPAREN          shift and go to state 71
    OR              shift and go to state 42
    AND             shift and go to state 27
    EQ              shift and go to state 41
    NE              shift and go to state 34
    LE              shift and go to state 29
    LT              shift and go to state 36
    GE              shift and go to state 30
    GT              shift and go to state 37
    IN              shift and go to state 38
    NI              shift and go to state 28
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35


state 45

    (5) expression_list -> expression_decl_list COMMA . logical_expression
    (7) expression_decl_list -> expression_decl_list COMMA . expression_decl
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL
    (8) expression_decl -> . assign_expression
    (9) expression_decl -> . bind_expression
    (10) assign_expression -> . VARIABLE EQUALS conditional_expression
    (11) bind_expression -> . VARIABLE COLON VARIABLE

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 5
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    bind_expression                shift and go to state 10
    expression_decl                shift and go to state 72
    logical_expression             shift and go to state 73
    assign_expression              shift and go to state 13

state 46

    (33) logical_expression -> ADD logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 33 (logical_expression -> ADD logical_expression .)
    OR              reduce using rule 33 (logical_expression -> ADD logical_expression .)
    AND             reduce using rule 33 (logical_expression -> ADD logical_expression .)
    EQ              reduce using rule 33 (logical_expression -> ADD logical_expression .)
    NE              reduce using rule 33 (logical_expression -> ADD logical_expression .)
    LE              reduce using rule 33 (logical_expression -> ADD logical_expression .)
    LT              reduce using rule 33 (logical_expression -> ADD logical_expression .)
    GE              reduce using rule 33 (logical_expression -> ADD logical_expression .)
    GT              reduce using rule 33 (logical_expression -> ADD logical_expression .)
    IN              reduce using rule 33 (logical_expression -> ADD logical_expression .)
    NI              reduce using rule 33 (logical_expression -> ADD logical_expression .)
    ADD             reduce using rule 33 (logical_expression -> ADD logical_expression .)
    SUB             reduce using rule 33 (logical_expression -> ADD logical_expression .)
    MUL             reduce using rule 33 (logical_expression -> ADD logical_expression .)
    FLOORDIV        reduce using rule 33 (logical_expression -> ADD logical_expression .)
    DIV             reduce using rule 33 (logical_expression -> ADD logical_expression .)
    MOD             reduce using rule 33 (logical_expression -> ADD logical_expression .)
    COMMA           reduce using rule 33 (logical_expression -> ADD logical_expression .)
    $end            reduce using rule 33 (logical_expression -> ADD logical_expression .)
    RPAREN          reduce using rule 33 (logical_expression -> ADD logical_expression .)
    RBRACKET        reduce using rule 33 (logical_expression -> ADD logical_expression .)
    COLON           reduce using rule 33 (logical_expression -> ADD logical_expression .)
    PERIOD          shift and go to state 35

  ! PERIOD          [ reduce using rule 33 (logical_expression -> ADD logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]
  ! ADD             [ shift and go to state 32 ]
  ! SUB             [ shift and go to state 31 ]
  ! MUL             [ shift and go to state 39 ]
  ! FLOORDIV        [ shift and go to state 33 ]
  ! DIV             [ shift and go to state 40 ]
  ! MOD             [ shift and go to state 43 ]


state 47

    (31) logical_expression -> NOT logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 31 (logical_expression -> NOT logical_expression .)
    OR              reduce using rule 31 (logical_expression -> NOT logical_expression .)
    AND             reduce using rule 31 (logical_expression -> NOT logical_expression .)
    EQ              reduce using rule 31 (logical_expression -> NOT logical_expression .)
    NE              reduce using rule 31 (logical_expression -> NOT logical_expression .)
    LE              reduce using rule 31 (logical_expression -> NOT logical_expression .)
    LT              reduce using rule 31 (logical_expression -> NOT logical_expression .)
    GE              reduce using rule 31 (logical_expression -> NOT logical_expression .)
    GT              reduce using rule 31 (logical_expression -> NOT logical_expression .)
    IN              reduce using rule 31 (logical_expression -> NOT logical_expression .)
    NI              reduce using rule 31 (logical_expression -> NOT logical_expression .)
    ADD             reduce using rule 31 (logical_expression -> NOT logical_expression .)
    SUB             reduce using rule 31 (logical_expression -> NOT logical_expression .)
    MUL             reduce using rule 31 (logical_expression -> NOT logical_expression .)
    FLOORDIV        reduce using rule 31 (logical_expression -> NOT logical_expression .)
    DIV             reduce using rule 31 (logical_expression -> NOT logical_expression .)
    MOD             reduce using rule 31 (logical_expression -> NOT logical_expression .)
    COMMA           reduce using rule 31 (logical_expression -> NOT logical_expression .)
    $end            reduce using rule 31 (logical_expression -> NOT logical_expression .)
    RPAREN          reduce using rule 31 (logical_expression -> NOT logical_expression .)
    RBRACKET        reduce using rule 31 (logical_expression -> NOT logical_expression .)
    COLON           reduce using rule 31 (logical_expression -> NOT logical_expression .)
    PERIOD          shift and go to state 35

  ! PERIOD          [ reduce using rule 31 (logical_expression -> NOT logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]
  ! ADD             [ shift and go to state 32 ]
  ! SUB             [ shift and go to state 31 ]
  ! MUL             [ shift and go to state 39 ]
  ! FLOORDIV        [ shift and go to state 33 ]
  ! DIV             [ shift and go to state 40 ]
  ! MOD             [ shift and go to state 43 ]


state 48

    (36) logical_expression -> LBRACKET empty RBRACKET .

    CONDITION       reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    OR              reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    AND             reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    EQ              reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    NE              reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    LE              reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    LT              reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    GE              reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    GT              reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    IN              reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    NI              reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    ADD             reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    SUB             reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    MUL             reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    FLOORDIV        reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    DIV             reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    MOD             reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    PERIOD          reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    COMMA           reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    $end            reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    RPAREN          reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    RBRACKET        reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)
    COLON           reduce using rule 36 (logical_expression -> LBRACKET empty RBRACKET .)


state 49

    (35) logical_expression -> LBRACKET logical_comma_expression RBRACKET .

    CONDITION       reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    OR              reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    AND             reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    EQ              reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    NE              reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    LE              reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    LT              reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    GE              reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    GT              reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    IN              reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    NI              reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    ADD             reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    SUB             reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    MUL             reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    FLOORDIV        reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    DIV             reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    MOD             reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    PERIOD          reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    COMMA           reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    $end            reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    RPAREN          reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    RBRACKET        reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)
    COLON           reduce using rule 35 (logical_expression -> LBRACKET logical_comma_expression RBRACKET .)


state 50

    (38) logical_comma_expression -> logical_comma_expression COMMA . logical_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 74

state 51

    (11) bind_expression -> VARIABLE COLON VARIABLE .

    COMMA           reduce using rule 11 (bind_expression -> VARIABLE COLON VARIABLE .)
    $end            reduce using rule 11 (bind_expression -> VARIABLE COLON VARIABLE .)


state 52

    (12) conditional_expression -> logical_expression .
    (13) conditional_expression -> logical_expression . CONDITION logical_expression COLON conditional_expression
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    COMMA           reduce using rule 12 (conditional_expression -> logical_expression .)
    $end            reduce using rule 12 (conditional_expression -> logical_expression .)
    CONDITION       shift and go to state 75
    OR              shift and go to state 42
    AND             shift and go to state 27
    EQ              shift and go to state 41
    NE              shift and go to state 34
    LE              shift and go to state 29
    LT              shift and go to state 36
    GE              shift and go to state 30
    GT              shift and go to state 37
    IN              shift and go to state 38
    NI              shift and go to state 28
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35


state 53

    (10) assign_expression -> VARIABLE EQUALS conditional_expression .

    COMMA           reduce using rule 10 (assign_expression -> VARIABLE EQUALS conditional_expression .)
    $end            reduce using rule 10 (assign_expression -> VARIABLE EQUALS conditional_expression .)


state 54

    (15) logical_expression -> logical_expression AND logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .)
    OR              reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .)
    AND             reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .)
    COMMA           reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .)
    $end            reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .)
    RPAREN          reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .)
    RBRACKET        reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .)
    COLON           reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .)
    EQ              shift and go to state 41
    NE              shift and go to state 34
    LE              shift and go to state 29
    LT              shift and go to state 36
    GE              shift and go to state 30
    GT              shift and go to state 37
    IN              shift and go to state 38
    NI              shift and go to state 28
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35

  ! EQ              [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! NE              [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! LE              [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! LT              [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! GE              [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! GT              [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! IN              [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! NI              [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! ADD             [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! SUB             [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! MUL             [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! FLOORDIV        [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! DIV             [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! MOD             [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! PERIOD          [ reduce using rule 15 (logical_expression -> logical_expression AND logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]


state 55

    (23) logical_expression -> logical_expression NI logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    OR              reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    AND             reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    EQ              reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    NE              reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    LE              reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    LT              reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    GE              reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    GT              reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    IN              reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    NI              reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    COMMA           reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    $end            reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    RPAREN          reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    RBRACKET        reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    COLON           reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .)
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35

  ! ADD             [ reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .) ]
  ! SUB             [ reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .) ]
  ! MUL             [ reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .) ]
  ! FLOORDIV        [ reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .) ]
  ! DIV             [ reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .) ]
  ! MOD             [ reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .) ]
  ! PERIOD          [ reduce using rule 23 (logical_expression -> logical_expression NI logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]


state 56

    (18) logical_expression -> logical_expression LE logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    OR              reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    AND             reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    EQ              reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    NE              reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    LE              reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    LT              reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    GE              reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    GT              reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    IN              reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    NI              reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    COMMA           reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    $end            reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    RPAREN          reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    RBRACKET        reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    COLON           reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .)
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35

  ! ADD             [ reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .) ]
  ! SUB             [ reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .) ]
  ! MUL             [ reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .) ]
  ! FLOORDIV        [ reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .) ]
  ! DIV             [ reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .) ]
  ! MOD             [ reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .) ]
  ! PERIOD          [ reduce using rule 18 (logical_expression -> logical_expression LE logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]


state 57

    (20) logical_expression -> logical_expression GE logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    OR              reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    AND             reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    EQ              reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    NE              reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    LE              reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    LT              reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    GE              reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    GT              reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    IN              reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    NI              reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    COMMA           reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    $end            reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    RPAREN          reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    RBRACKET        reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    COLON           reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .)
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35

  ! ADD             [ reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .) ]
  ! SUB             [ reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .) ]
  ! MUL             [ reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .) ]
  ! FLOORDIV        [ reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .) ]
  ! DIV             [ reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .) ]
  ! MOD             [ reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .) ]
  ! PERIOD          [ reduce using rule 20 (logical_expression -> logical_expression GE logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]


state 58

    (25) logical_expression -> logical_expression SUB logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    OR              reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    AND             reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    EQ              reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    NE              reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    LE              reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    LT              reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    GE              reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    GT              reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    IN              reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    NI              reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    ADD             reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    SUB             reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    COMMA           reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    $end            reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    RPAREN          reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    RBRACKET        reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    COLON           reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .)
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35

  ! MUL             [ reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .) ]
  ! FLOORDIV        [ reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .) ]
  ! DIV             [ reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .) ]
  ! MOD             [ reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .) ]
  ! PERIOD          [ reduce using rule 25 (logical_expression -> logical_expression SUB logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]
  ! ADD             [ shift and go to state 32 ]
  ! SUB             [ shift and go to state 31 ]


state 59

    (24) logical_expression -> logical_expression ADD logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    OR              reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    AND             reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    EQ              reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    NE              reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    LE              reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    LT              reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    GE              reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    GT              reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    IN              reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    NI              reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    ADD             reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    SUB             reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    COMMA           reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    $end            reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    RPAREN          reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    RBRACKET        reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    COLON           reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .)
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35

  ! MUL             [ reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .) ]
  ! FLOORDIV        [ reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .) ]
  ! DIV             [ reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .) ]
  ! MOD             [ reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .) ]
  ! PERIOD          [ reduce using rule 24 (logical_expression -> logical_expression ADD logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]
  ! ADD             [ shift and go to state 32 ]
  ! SUB             [ shift and go to state 31 ]


state 60

    (27) logical_expression -> logical_expression FLOORDIV logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    OR              reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    AND             reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    EQ              reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    NE              reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    LE              reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    LT              reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    GE              reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    GT              reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    IN              reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    NI              reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    ADD             reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    SUB             reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    MUL             reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    FLOORDIV        reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    DIV             reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    MOD             reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    COMMA           reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    $end            reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    RPAREN          reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    RBRACKET        reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    COLON           reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .)
    PERIOD          shift and go to state 35

  ! PERIOD          [ reduce using rule 27 (logical_expression -> logical_expression FLOORDIV logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]
  ! ADD             [ shift and go to state 32 ]
  ! SUB             [ shift and go to state 31 ]
  ! MUL             [ shift and go to state 39 ]
  ! FLOORDIV        [ shift and go to state 33 ]
  ! DIV             [ shift and go to state 40 ]
  ! MOD             [ shift and go to state 43 ]


state 61

    (17) logical_expression -> logical_expression NE logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .)
    OR              reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .)
    AND             reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .)
    EQ              reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .)
    NE              reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .)
    COMMA           reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .)
    $end            reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .)
    RPAREN          reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .)
    RBRACKET        reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .)
    COLON           reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .)
    LE              shift and go to state 29
    LT              shift and go to state 36
    GE              shift and go to state 30
    GT              shift and go to state 37
    IN              shift and go to state 38
    NI              shift and go to state 28
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35

  ! LE              [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! LT              [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! GE              [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! GT              [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! IN              [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! NI              [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! ADD             [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! SUB             [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! MUL             [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! FLOORDIV        [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! DIV             [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! MOD             [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! PERIOD          [ reduce using rule 17 (logical_expression -> logical_expression NE logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]


state 62

    (30) logical_expression -> logical_expression PERIOD SYMBOL .

    CONDITION       reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    OR              reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    AND             reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    EQ              reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    NE              reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    LE              reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    LT              reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    GE              reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    GT              reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    IN              reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    NI              reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    ADD             reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    SUB             reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    MUL             reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    FLOORDIV        reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    DIV             reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    MOD             reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    PERIOD          reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    COMMA           reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    $end            reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    RPAREN          reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    RBRACKET        reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)
    COLON           reduce using rule 30 (logical_expression -> logical_expression PERIOD SYMBOL .)


state 63

    (19) logical_expression -> logical_expression LT logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    OR              reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    AND             reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    EQ              reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    NE              reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    LE              reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    LT              reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    GE              reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    GT              reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    IN              reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    NI              reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    COMMA           reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    $end            reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    RPAREN          reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    RBRACKET        reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    COLON           reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .)
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35

  ! ADD             [ reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .) ]
  ! SUB             [ reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .) ]
  ! MUL             [ reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .) ]
  ! FLOORDIV        [ reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .) ]
  ! DIV             [ reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .) ]
  ! MOD             [ reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .) ]
  ! PERIOD          [ reduce using rule 19 (logical_expression -> logical_expression LT logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]


state 64

    (21) logical_expression -> logical_expression GT logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    OR              reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    AND             reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    EQ              reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    NE              reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    LE              reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    LT              reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    GE              reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    GT              reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    IN              reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    NI              reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    COMMA           reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    $end            reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    RPAREN          reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    RBRACKET        reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    COLON           reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .)
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35

  ! ADD             [ reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .) ]
  ! SUB             [ reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .) ]
  ! MUL             [ reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .) ]
  ! FLOORDIV        [ reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .) ]
  ! DIV             [ reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .) ]
  ! MOD             [ reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .) ]
  ! PERIOD          [ reduce using rule 21 (logical_expression -> logical_expression GT logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]


state 65

    (22) logical_expression -> logical_expression IN logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    OR              reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    AND             reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    EQ              reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    NE              reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    LE              reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    LT              reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    GE              reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    GT              reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    IN              reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    NI              reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    COMMA           reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    $end            reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    RPAREN          reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    RBRACKET        reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    COLON           reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .)
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35

  ! ADD             [ reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .) ]
  ! SUB             [ reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .) ]
  ! MUL             [ reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .) ]
  ! FLOORDIV        [ reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .) ]
  ! DIV             [ reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .) ]
  ! MOD             [ reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .) ]
  ! PERIOD          [ reduce using rule 22 (logical_expression -> logical_expression IN logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]


state 66

    (26) logical_expression -> logical_expression MUL logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    OR              reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    AND             reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    EQ              reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    NE              reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    LE              reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    LT              reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    GE              reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    GT              reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    IN              reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    NI              reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    ADD             reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    SUB             reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    MUL             reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    FLOORDIV        reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    DIV             reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    MOD             reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    COMMA           reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    $end            reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    RPAREN          reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    RBRACKET        reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    COLON           reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .)
    PERIOD          shift and go to state 35

  ! PERIOD          [ reduce using rule 26 (logical_expression -> logical_expression MUL logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]
  ! ADD             [ shift and go to state 32 ]
  ! SUB             [ shift and go to state 31 ]
  ! MUL             [ shift and go to state 39 ]
  ! FLOORDIV        [ shift and go to state 33 ]
  ! DIV             [ shift and go to state 40 ]
  ! MOD             [ shift and go to state 43 ]


state 67

    (28) logical_expression -> logical_expression DIV logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    OR              reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    AND             reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    EQ              reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    NE              reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    LE              reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    LT              reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    GE              reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    GT              reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    IN              reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    NI              reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    ADD             reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    SUB             reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    MUL             reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    FLOORDIV        reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    DIV             reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    MOD             reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    COMMA           reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    $end            reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    RPAREN          reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    RBRACKET        reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    COLON           reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .)
    PERIOD          shift and go to state 35

  ! PERIOD          [ reduce using rule 28 (logical_expression -> logical_expression DIV logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]
  ! ADD             [ shift and go to state 32 ]
  ! SUB             [ shift and go to state 31 ]
  ! MUL             [ shift and go to state 39 ]
  ! FLOORDIV        [ shift and go to state 33 ]
  ! DIV             [ shift and go to state 40 ]
  ! MOD             [ shift and go to state 43 ]


state 68

    (16) logical_expression -> logical_expression EQ logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .)
    OR              reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .)
    AND             reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .)
    EQ              reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .)
    NE              reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .)
    COMMA           reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .)
    $end            reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .)
    RPAREN          reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .)
    RBRACKET        reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .)
    COLON           reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .)
    LE              shift and go to state 29
    LT              shift and go to state 36
    GE              shift and go to state 30
    GT              shift and go to state 37
    IN              shift and go to state 38
    NI              shift and go to state 28
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35

  ! LE              [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! LT              [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! GE              [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! GT              [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! IN              [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! NI              [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! ADD             [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! SUB             [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! MUL             [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! FLOORDIV        [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! DIV             [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! MOD             [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! PERIOD          [ reduce using rule 16 (logical_expression -> logical_expression EQ logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]


state 69

    (14) logical_expression -> logical_expression OR logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .)
    OR              reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .)
    COMMA           reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .)
    $end            reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .)
    RPAREN          reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .)
    RBRACKET        reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .)
    COLON           reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .)
    AND             shift and go to state 27
    EQ              shift and go to state 41
    NE              shift and go to state 34
    LE              shift and go to state 29
    LT              shift and go to state 36
    GE              shift and go to state 30
    GT              shift and go to state 37
    IN              shift and go to state 38
    NI              shift and go to state 28
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35

  ! AND             [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! EQ              [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! NE              [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! LE              [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! LT              [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! GE              [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! GT              [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! IN              [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! NI              [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! ADD             [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! SUB             [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! MUL             [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! FLOORDIV        [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! DIV             [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! MOD             [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! PERIOD          [ reduce using rule 14 (logical_expression -> logical_expression OR logical_expression .) ]
  ! OR              [ shift and go to state 42 ]


state 70

    (29) logical_expression -> logical_expression MOD logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    CONDITION       reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    OR              reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    AND             reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    EQ              reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    NE              reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    LE              reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    LT              reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    GE              reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    GT              reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    IN              reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    NI              reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    ADD             reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    SUB             reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    MUL             reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    FLOORDIV        reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    DIV             reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    MOD             reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    COMMA           reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    $end            reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    RPAREN          reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    RBRACKET        reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    COLON           reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .)
    PERIOD          shift and go to state 35

  ! PERIOD          [ reduce using rule 29 (logical_expression -> logical_expression MOD logical_expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! AND             [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 36 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 37 ]
  ! IN              [ shift and go to state 38 ]
  ! NI              [ shift and go to state 28 ]
  ! ADD             [ shift and go to state 32 ]
  ! SUB             [ shift and go to state 31 ]
  ! MUL             [ shift and go to state 39 ]
  ! FLOORDIV        [ shift and go to state 33 ]
  ! DIV             [ shift and go to state 40 ]
  ! MOD             [ shift and go to state 43 ]


state 71

    (34) logical_expression -> LPAREN logical_expression RPAREN .

    CONDITION       reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    OR              reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    AND             reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    EQ              reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    NE              reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    LE              reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    LT              reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    GE              reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    GT              reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    IN              reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    NI              reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    ADD             reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    SUB             reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    MUL             reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    FLOORDIV        reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    DIV             reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    MOD             reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    PERIOD          reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    COMMA           reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    $end            reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    RPAREN          reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    RBRACKET        reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)
    COLON           reduce using rule 34 (logical_expression -> LPAREN logical_expression RPAREN .)


state 72

    (7) expression_decl_list -> expression_decl_list COMMA expression_decl .

    COMMA           reduce using rule 7 (expression_decl_list -> expression_decl_list COMMA expression_decl .)
    $end            reduce using rule 7 (expression_decl_list -> expression_decl_list COMMA expression_decl .)


state 73

    (5) expression_list -> expression_decl_list COMMA logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    $end            reduce using rule 5 (expression_list -> expression_decl_list COMMA logical_expression .)
    OR              shift and go to state 42
    AND             shift and go to state 27
    EQ              shift and go to state 41
    NE              shift and go to state 34
    LE              shift and go to state 29
    LT              shift and go to state 36
    GE              shift and go to state 30
    GT              shift and go to state 37
    IN              shift and go to state 38
    NI              shift and go to state 28
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35


state 74

    (38) logical_comma_expression -> logical_comma_expression COMMA logical_expression .
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    RBRACKET        reduce using rule 38 (logical_comma_expression -> logical_comma_expression COMMA logical_expression .)
    COMMA           reduce using rule 38 (logical_comma_expression -> logical_comma_expression COMMA logical_expression .)
    OR              shift and go to state 42
    AND             shift and go to state 27
    EQ              shift and go to state 41
    NE              shift and go to state 34
    LE              shift and go to state 29
    LT              shift and go to state 36
    GE              shift and go to state 30
    GT              shift and go to state 37
    IN              shift and go to state 38
    NI              shift and go to state 28
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35


state 75

    (13) conditional_expression -> logical_expression CONDITION . logical_expression COLON conditional_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 76

state 76

    (13) conditional_expression -> logical_expression CONDITION logical_expression . COLON conditional_expression
    (14) logical_expression -> logical_expression . OR logical_expression
    (15) logical_expression -> logical_expression . AND logical_expression
    (16) logical_expression -> logical_expression . EQ logical_expression
    (17) logical_expression -> logical_expression . NE logical_expression
    (18) logical_expression -> logical_expression . LE logical_expression
    (19) logical_expression -> logical_expression . LT logical_expression
    (20) logical_expression -> logical_expression . GE logical_expression
    (21) logical_expression -> logical_expression . GT logical_expression
    (22) logical_expression -> logical_expression . IN logical_expression
    (23) logical_expression -> logical_expression . NI logical_expression
    (24) logical_expression -> logical_expression . ADD logical_expression
    (25) logical_expression -> logical_expression . SUB logical_expression
    (26) logical_expression -> logical_expression . MUL logical_expression
    (27) logical_expression -> logical_expression . FLOORDIV logical_expression
    (28) logical_expression -> logical_expression . DIV logical_expression
    (29) logical_expression -> logical_expression . MOD logical_expression
    (30) logical_expression -> logical_expression . PERIOD SYMBOL

    COLON           shift and go to state 77
    OR              shift and go to state 42
    AND             shift and go to state 27
    EQ              shift and go to state 41
    NE              shift and go to state 34
    LE              shift and go to state 29
    LT              shift and go to state 36
    GE              shift and go to state 30
    GT              shift and go to state 37
    IN              shift and go to state 38
    NI              shift and go to state 28
    ADD             shift and go to state 32
    SUB             shift and go to state 31
    MUL             shift and go to state 39
    FLOORDIV        shift and go to state 33
    DIV             shift and go to state 40
    MOD             shift and go to state 43
    PERIOD          shift and go to state 35


state 77

    (13) conditional_expression -> logical_expression CONDITION logical_expression COLON . conditional_expression
    (12) conditional_expression -> . logical_expression
    (13) conditional_expression -> . logical_expression CONDITION logical_expression COLON conditional_expression
    (14) logical_expression -> . logical_expression OR logical_expression
    (15) logical_expression -> . logical_expression AND logical_expression
    (16) logical_expression -> . logical_expression EQ logical_expression
    (17) logical_expression -> . logical_expression NE logical_expression
    (18) logical_expression -> . logical_expression LE logical_expression
    (19) logical_expression -> . logical_expression LT logical_expression
    (20) logical_expression -> . logical_expression GE logical_expression
    (21) logical_expression -> . logical_expression GT logical_expression
    (22) logical_expression -> . logical_expression IN logical_expression
    (23) logical_expression -> . logical_expression NI logical_expression
    (24) logical_expression -> . logical_expression ADD logical_expression
    (25) logical_expression -> . logical_expression SUB logical_expression
    (26) logical_expression -> . logical_expression MUL logical_expression
    (27) logical_expression -> . logical_expression FLOORDIV logical_expression
    (28) logical_expression -> . logical_expression DIV logical_expression
    (29) logical_expression -> . logical_expression MOD logical_expression
    (30) logical_expression -> . logical_expression PERIOD SYMBOL
    (31) logical_expression -> . NOT logical_expression
    (32) logical_expression -> . SUB logical_expression
    (33) logical_expression -> . ADD logical_expression
    (34) logical_expression -> . LPAREN logical_expression RPAREN
    (35) logical_expression -> . LBRACKET logical_comma_expression RBRACKET
    (36) logical_expression -> . LBRACKET empty RBRACKET
    (39) logical_expression -> . FLOAT
    (40) logical_expression -> . INT
    (41) logical_expression -> . STRING
    (42) logical_expression -> . VARIABLE
    (43) logical_expression -> . FILTER
    (44) logical_expression -> . SYMBOL

    NOT             shift and go to state 19
    SUB             shift and go to state 1
    ADD             shift and go to state 17
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 4
    FLOAT           shift and go to state 16
    INT             shift and go to state 14
    STRING          shift and go to state 9
    VARIABLE        shift and go to state 21
    FILTER          shift and go to state 18
    SYMBOL          shift and go to state 3

    logical_expression             shift and go to state 52
    conditional_expression         shift and go to state 78

state 78

    (13) conditional_expression -> logical_expression CONDITION logical_expression COLON conditional_expression .

    COMMA           reduce using rule 13 (conditional_expression -> logical_expression CONDITION logical_expression COLON conditional_expression .)
    $end            reduce using rule 13 (conditional_expression -> logical_expression CONDITION logical_expression COLON conditional_expression .)

